/* Generated By:JavaCC: Do not edit this line. SemanticChecker.java */
public class SemanticChecker implements SemanticCheckerConstants {

    public static void main(String[] args) {
        try {
            new SemanticChecker(new java.io.StringReader(args[0])).Program();

            System.out.println("Semantic is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!            System.out.println("Semantic check failed: " + e.getMessage());
        }
    }

  final public void Program() throws ParseException {
    jj_consume_token(START);
    jj_consume_token(ident);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
      case INTERFACE:
      case ENUM:
      case CONST:
      case ident:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        ConstDecl();
        break;
      case ident:
        VarDecl();
        break;
      case STRUCT:
        StructDecl();
        break;
      case ENUM:
        EnumDecl();
        break;
      case INTERFACE:
        InterfaceDecl();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(LParantheses);
    MethodDecl();
    jj_consume_token(RParantheses);
    jj_consume_token(0);
  }

  final public void ConstDecl() throws ParseException {
    jj_consume_token(CONST);
    Type();
    jj_consume_token(ident);
    jj_consume_token(ASSA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numConst:
      jj_consume_token(numConst);
      break;
    case charConst:
      jj_consume_token(charConst);
      break;
    case booleanConst:
      jj_consume_token(booleanConst);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(ident);
      jj_consume_token(ASSA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case numConst:
        jj_consume_token(numConst);
        break;
      case charConst:
        jj_consume_token(charConst);
        break;
      case booleanConst:
        jj_consume_token(booleanConst);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  final public void EnumDecl() throws ParseException {
    jj_consume_token(ENUM);
    jj_consume_token(ident);
    jj_consume_token(LParantheses);
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSA:
      jj_consume_token(ASSA);
      jj_consume_token(numConst);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(57);
      jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSA:
        jj_consume_token(ASSA);
        jj_consume_token(numConst);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    }
    jj_consume_token(RParantheses);
  }

  final public void VarDecl() throws ParseException {
    Type();
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSquarebracket:
      jj_consume_token(LSquarebracket);
      jj_consume_token(RSquarebracket);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(57);
      jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSquarebracket:
        jj_consume_token(LSquarebracket);
        jj_consume_token(RSquarebracket);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  final public void StructDecl() throws ParseException {
    jj_consume_token(STRUCT);
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      Type();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      Type();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 57:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(57);
        Type();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(LParantheses);
    VarDecl();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LParantheses:
      jj_consume_token(LParantheses);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case ident:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        MethodDecl();
      }
      jj_consume_token(RParantheses);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(RParantheses);
  }

  final public void InterfaceDecl() throws ParseException {
    jj_consume_token(INTERFACE);
    jj_consume_token(ident);
    jj_consume_token(LParantheses);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case ident:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      InterfaceMethodDecl();
    }
    jj_consume_token(RParantheses);
  }

  final public void InterfaceMethodDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      Type();
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ident);
    jj_consume_token(LBracket);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      FormPars();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RBracket);
    jj_consume_token(SEMICOLON);
  }

  final public void MethodDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      Type();
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ident);
    jj_consume_token(LBracket);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      FormPars();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(RBracket);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      VarDecl();
    }
    jj_consume_token(LParantheses);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case IF:
      case PRINTF:
      case READ:
      case RETURN:
      case FOR:
      case CONTINUE:
      case ident:
      case LParantheses:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      Stmt();
    }
    jj_consume_token(RParantheses);
  }

  final public void FormPars() throws ParseException {
    Type();
    jj_consume_token(ident);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSquarebracket:
      jj_consume_token(LSquarebracket);
      jj_consume_token(RSquarebracket);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(57);
      Type();
      jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSquarebracket:
        jj_consume_token(LSquarebracket);
        jj_consume_token(RSquarebracket);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    }
  }

  final public void Type() throws ParseException {
    jj_consume_token(ident);
  }

  final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      DesignatorStmt();
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LBracket);
      Condition();
      jj_consume_token(RBracket);
      Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Stmt();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LBracket);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
        DesignatorStmt();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case ident:
      case numConst:
      case charConst:
      case booleanConst:
      case MINUS:
      case LBracket:
        Condition();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ident:
        DesignatorStmt();
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(RBracket);
      Stmt();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMICOLON);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case ident:
      case numConst:
      case charConst:
      case booleanConst:
      case MINUS:
      case LBracket:
        Expression();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      break;
    case READ:
      jj_consume_token(READ);
      jj_consume_token(LBracket);
      Designator();
      jj_consume_token(RBracket);
      jj_consume_token(SEMICOLON);
      break;
    case PRINTF:
      jj_consume_token(PRINTF);
      jj_consume_token(LBracket);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        jj_consume_token(57);
        jj_consume_token(numConst);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RBracket);
      jj_consume_token(SEMICOLON);
      break;
    case LParantheses:
      jj_consume_token(LParantheses);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case IF:
        case PRINTF:
        case READ:
        case RETURN:
        case FOR:
        case CONTINUE:
        case ident:
        case LParantheses:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        Stmt();
      }
      jj_consume_token(RParantheses);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DesignatorStmt() throws ParseException {
    Designator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSA:
      Assignop();
      Expression();
      break;
    case LBracket:
      jj_consume_token(LBracket);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case ident:
      case numConst:
      case charConst:
      case booleanConst:
      case MINUS:
      case LBracket:
        ActPars();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RBracket);
      break;
    case PLUSONE:
      jj_consume_token(PLUSONE);
      break;
    case MINUSONE:
      jj_consume_token(MINUSONE);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ActPars() throws ParseException {
    Expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
      jj_consume_token(57);
      Expression();
    }
  }

  final public void Condition() throws ParseException {
    CondTerm();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_13;
      }
      jj_consume_token(OR);
      CondTerm();
    }
  }

  final public void CondTerm() throws ParseException {
    CondFact();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
      jj_consume_token(AND);
      CondFact();
    }
  }

  final public void CondFact() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQU:
    case NOEQU:
    case GREATER:
    case NOLESS:
    case LESS:
    case NOGREATER:
      Relop();
      Expression();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    Term();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_15;
      }
      Addop();
      Term();
    }
  }

  final public void Term() throws ParseException {
    Factor();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIV:
      case REM:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_16;
      }
      Mulop();
      Factor();
    }
  }

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ident:
      Designator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBracket:
        jj_consume_token(LBracket);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case ident:
        case numConst:
        case charConst:
        case booleanConst:
        case MINUS:
        case LBracket:
          ActPars();
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
        jj_consume_token(RBracket);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      break;
    case numConst:
      jj_consume_token(numConst);
      break;
    case charConst:
      jj_consume_token(charConst);
      break;
    case booleanConst:
      jj_consume_token(booleanConst);
      break;
    case NEW:
      jj_consume_token(NEW);
      Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSquarebracket:
        jj_consume_token(LSquarebracket);
        Expression();
        jj_consume_token(RSquarebracket);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
    case LBracket:
      jj_consume_token(LBracket);
      Expression();
      jj_consume_token(RBracket);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Designator() throws ParseException {
    jj_consume_token(ident);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case dot:
      case LSquarebracket:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case dot:
        jj_consume_token(dot);
        jj_consume_token(ident);
        break;
      case LSquarebracket:
        jj_consume_token(LSquarebracket);
        Expression();
        jj_consume_token(RSquarebracket);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Assignop() throws ParseException {
    jj_consume_token(ASSA);
  }

  final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQU:
      jj_consume_token(EQU);
      break;
    case NOEQU:
      jj_consume_token(NOEQU);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    case NOLESS:
      jj_consume_token(NOLESS);
      break;
    case LESS:
      jj_consume_token(LESS);
      break;
    case NOGREATER:
      jj_consume_token(NOGREATER);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case REM:
      jj_consume_token(REM);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public SemanticCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200b8000,0x200b8000,0xc0000000,0x20000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x22000000,0x0,0x22000000,0x22000000,0x20000000,0x22000000,0x20000000,0x20000000,0x35d04000,0x0,0x0,0x0,0x40000,0x20000000,0xe0200000,0x20000000,0xe0200000,0x0,0x35d04000,0x35d04000,0xe0200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0200000,0x0,0x0,0xe0200000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x0,0x1,0x2,0x2000000,0x2,0x200000,0x2000000,0x200000,0x0,0x2000000,0x4000000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x200000,0x2000000,0x200000,0x0,0x0,0x80009,0x0,0x80009,0x2000000,0x800000,0x800000,0x80009,0x98002,0x2000000,0x4000,0x2000,0x1f80,0x8,0xc,0x70,0x80009,0x80000,0x200000,0x80001,0x240000,0x240000,0x1f80,0xc,0x70,};
   }

  /** Constructor with InputStream. */
  public SemanticChecker(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SemanticChecker(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SemanticCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SemanticChecker(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SemanticCheckerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SemanticChecker(SemanticCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SemanticCheckerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
