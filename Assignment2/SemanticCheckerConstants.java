/* Generated By:JavaCC: Do not edit this line. SemanticCheckerConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SemanticCheckerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CHAR = 9;
  /** RegularExpression Id. */
  int digit = 10;
  /** RegularExpression Id. */
  int letter = 11;
  /** RegularExpression Id. */
  int ID = 12;
  /** RegularExpression Id. */
  int START = 13;
  /** RegularExpression Id. */
  int BREAK = 14;
  /** RegularExpression Id. */
  int STRUCT = 15;
  /** RegularExpression Id. */
  int INTERFACE = 16;
  /** RegularExpression Id. */
  int ENUM = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int CONST = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int NEW = 21;
  /** RegularExpression Id. */
  int PRINTF = 22;
  /** RegularExpression Id. */
  int READ = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int VOID = 25;
  /** RegularExpression Id. */
  int FOR = 26;
  /** RegularExpression Id. */
  int EXTENDS = 27;
  /** RegularExpression Id. */
  int CONTINUE = 28;
  /** RegularExpression Id. */
  int ident = 29;
  /** RegularExpression Id. */
  int numConst = 30;
  /** RegularExpression Id. */
  int charConst = 31;
  /** RegularExpression Id. */
  int booleanConst = 32;
  /** RegularExpression Id. */
  int ASSA = 33;
  /** RegularExpression Id. */
  int PLUS = 34;
  /** RegularExpression Id. */
  int MINUS = 35;
  /** RegularExpression Id. */
  int TIMES = 36;
  /** RegularExpression Id. */
  int DIV = 37;
  /** RegularExpression Id. */
  int REM = 38;
  /** RegularExpression Id. */
  int EQU = 39;
  /** RegularExpression Id. */
  int NOEQU = 40;
  /** RegularExpression Id. */
  int GREATER = 41;
  /** RegularExpression Id. */
  int NOLESS = 42;
  /** RegularExpression Id. */
  int LESS = 43;
  /** RegularExpression Id. */
  int NOGREATER = 44;
  /** RegularExpression Id. */
  int AND = 45;
  /** RegularExpression Id. */
  int OR = 46;
  /** RegularExpression Id. */
  int PLUSONE = 47;
  /** RegularExpression Id. */
  int MINUSONE = 48;
  /** RegularExpression Id. */
  int SEMICOLON = 49;
  /** RegularExpression Id. */
  int dot = 50;
  /** RegularExpression Id. */
  int LBracket = 51;
  /** RegularExpression Id. */
  int RBracket = 52;
  /** RegularExpression Id. */
  int LSquarebracket = 53;
  /** RegularExpression Id. */
  int RSquarebracket = 54;
  /** RegularExpression Id. */
  int LParantheses = 55;
  /** RegularExpression Id. */
  int RParantheses = 56;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "<CHAR>",
    "<digit>",
    "<letter>",
    "<ID>",
    "\"start\"",
    "\"break\"",
    "\"struct\"",
    "\"interface\"",
    "\"enum\"",
    "\"else\"",
    "\"const\"",
    "\"if\"",
    "\"new\"",
    "\"printf\"",
    "\"read\"",
    "\"return\"",
    "\"void\"",
    "\"for\"",
    "\"extends\"",
    "\"continue\"",
    "<ident>",
    "<numConst>",
    "<charConst>",
    "<booleanConst>",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"++\"",
    "\"--\"",
    "\";\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"implements\"",
  };

}
